@tailwind base;
@tailwind components;
@tailwind utilities;

/* 
Glede na tole:
https://github.com/tailwindlabs/tailwindcss/discussions/3553
se pri tailwindu ne uporablja styleov direktno na html tag.
Ampak imaš classe, ki jih potem v html-ju specifyaš.
Vsa fora je, da pri tailwindu ko daš style na html element, to ne cascadea v njegove child elemente.
Zato ko uporabimo original-index.css v App.tsx dobimo, da so logoti (<a>) lepo postavljeni:
ker pomoje obvelja od body-ja css, ki pravi
  display: flex;
  place-items: center;
Ko pa uporabimo to, kar sem napisal na dnu datoteke, pa so logoti kar stacked en na drugega.


Potem imaš pa v tailwindu tole sintakso:
<div class="[&>*]:p-4">...</div>
da je stvar applied na child elemente tega html elementa.


V običajnem html-ju (ne react, kjer imaš importe na vhu) bi apparently lahko naredil to:
<head>
 <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 <link rel="stylesheet" href="path/to/your/styles.css">
</head>
da pač kasneje linkaš svoj css, ki bo overridal tailwindove stile.
In bi potem lahko imel ta cascading.



Pomoje je pač najlažje definirati splošne stile kot je v prvem in drugem komentarju spodaj,
kar je tailwind naredil že od začetka.
Potem pa pač svoje stile dodajat direktno v html na ta način kot classe.
Ker saj pač tako je to namenjeno v tailwindu.
Pa okej, je nekaj več dela, ampak ni spet tako grozno.
Dodatno pišeš class za vsak html element.
Malo več dela, hkrati pa ohraniš ogromno kontrole nad tem, kaj se dogaja.


*/





/* 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
} */


/* 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
} */

/* This would do the same as above, but @layer base just ensures that
these are the styles that are applied first.
So ig if you change them later with things like the code below, it gets overwritten? */
/* * {
  @apply border-border;
}
body {
  @apply bg-background text-foreground;
} */
















/* 
@layer base {
  :root {
      @apply text-base font-normal leading-6 text-white bg-gray-800;
      font-family: 'Inter', system-ui, Avenir, Helvetica, Arial, sans-serif;
      font-synthesis: none;
      text-rendering: optimizeLegibility;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
  }

  a {
      @apply font-medium text-blue-500 no-underline;
  }

  a:hover {
      @apply text-blue-600;
  }

  body {
      @apply m-0 flex items-center justify-center min-w-[320px] min-h-screen;
  }

  h1 {
      @apply text-6xl leading-[1.1];
  }

  button {
      @apply rounded-lg border border-transparent px-3 py-1.5 text-base font-medium bg-gray-700 cursor-pointer transition-colors duration-200 ease-in-out;
  }

  button:hover {
      @apply border-blue-500;
  }

  button:focus,
  button:focus-visible {
      @apply outline-none ring-2 ring-offset-2 ring-blue-500;
  }
}

@layer components {
  @media (prefers-color-scheme: light) {
      :root {
          @apply text-gray-800 bg-white;
      }

      a:hover {
          @apply text-blue-600;
      }

      button {
          @apply bg-gray-100;
      }
  }
} */




/* 

.custom-root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
 }
 
 .custom-a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
 }
 
 .custom-a:hover {
  color: #535bf2;
 }
 
 .custom-body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
 }
 
 .custom-h1 {
  font-size: 3.2em;
  line-height: 1.1;
 }
 
 .custom-button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
 }
 
 .custom-button:hover {
  border-color: #646cff;
 }
 
 .custom-button:focus,
 .custom-button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
 }
 
 @layer components {
  :root {
     @apply custom-root;
  }
 
  
  body {
    @apply custom-body;
  }

  a {
     @apply custom-a;
  }
 
  h1 {
     @apply custom-h1;
  }
 
  button {
     @apply custom-button;
  }
 } */







